<?xml version="1.0" encoding="utf-8" ?>
<Page
    x:Class="WinUI3Example.TaskbarIconPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:essential="using:WinUI3Package"
    xmlns:local="using:WinUI3Example"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">


    <Page.Resources>
        <essential:TaskbarIcon
            x:Name="TaskbarIcon"
            LeftDoublePressed="TaskbarIcon_LeftDoublePressed"
            LeftPressed="TaskbarIcon_LeftPressed"
            MenuTheme="Default"
            PointerHover="TaskbarIcon_PointerHover"
            RightPressed="TaskbarIcon_RightPressed">
            <MenuFlyout>
                <MenuFlyoutItem Click="MenuFlyoutItem_Click" Text="Item1" />
                <MenuFlyoutItem
                    Click="MenuFlyoutItem_Click"
                    Icon="Copy"
                    Text="Item with copy icon" />
                <ToggleMenuFlyoutItem
                    Click="MenuFlyoutItem_Click"
                    IsChecked="True"
                    Text="Toggle menu item" />
                <MenuFlyoutItem
                    Icon="Cancel"
                    IsEnabled="False"
                    Text="Disabled item" />
                <MenuFlyoutItem Text="Invisible item" Visibility="Collapsed" />
                <MenuFlyoutSeparator />

                <RadioMenuFlyoutItem GroupName="Radios" Text="Radio Item1" />
                <RadioMenuFlyoutItem
                    GroupName="Radios"
                    IsChecked="True"
                    Text="Radio Item2" />

                <MenuFlyoutSeparator />
                <MenuFlyoutSubItem Text="Sub menu">
                    <MenuFlyoutItem Click="MenuFlyoutItem_Click" Text="Sub menu item" />
                    <MenuFlyoutItem
                        Click="MenuFlyoutItem_Click"
                        Icon="Paste"
                        Text="Sub menu item with paste icon" />
                </MenuFlyoutSubItem>
            </MenuFlyout>
        </essential:TaskbarIcon>

        <essential:TaskbarIcon x:Name="TaskbarIconWithPopupMenu">
            <essential:PopupMenuFlyout>
                <essential:PopupMenuFlyoutItem Click="PopupMenuFlyoutItem_Click" Text="Item1" />
                <essential:PopupMenuFlyoutItem
                    Click="PopupMenuFlyoutItem_Click"
                    Icon="Copy"
                    Text="Item with copy icon" />
                <essential:TogglePopupMenuFlyoutItem
                    Click="PopupMenuFlyoutItem_Click"
                    IsChecked="True"
                    Text="Toggle menu item" />
                <essential:PopupMenuFlyoutItem
                    Icon="Cancel"
                    IsEnabled="False"
                    Text="Disabled item" />
                <essential:PopupMenuFlyoutItem Text="Invisible item" Visibility="Collapsed" />
                <essential:PopupMenuFlyoutSeparator />

                <essential:RadioPopupMenuFlyoutItem GroupName="Radios" Text="Radio Item1" />
                <essential:RadioPopupMenuFlyoutItem
                    GroupName="Radios"
                    IsChecked="True"
                    Text="Radio Item2" />
                <essential:PopupMenuFlyoutSeparator />

                <essential:PopupMenuFlyoutSubItem Text="Sub menu">
                    <essential:PopupMenuFlyoutItem Click="PopupMenuFlyoutItem_Click" Text="Sub menu item" />
                    <essential:PopupMenuFlyoutItem
                        Click="PopupMenuFlyoutItem_Click"
                        Icon="Paste"
                        Text="Sub menu item with paste icon" />
                </essential:PopupMenuFlyoutSubItem>
            </essential:PopupMenuFlyout>
        </essential:TaskbarIcon>

        <Style BasedOn="{StaticResource DefaultRadioButtonStyle}" TargetType="RadioButton">
            <Setter Property="MinHeight" Value="200" />
        </Style>
    </Page.Resources>

    <StackPanel>
        <local:ControlExample HeaderText="Create app default tray icon">
            <ToggleSwitch
                Header="Show tray icon"
                IsOn="False"
                Toggled="ToggleSwitch_Toggled" />
            <local:ControlExample.Xaml>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">&lt;essential:TaskbarIcon
    x:Name=&quot;MainIcon&quot;
    Guid=&quot;{x:Bind local:MainWindow.IconGuid}&quot;
    Icon=&quot;ms-appx:///Assets/MainLogo.ico&quot;
    ToolTip=&quot;WinUI3Example&apos;s icon tooltip&quot;&gt;
    &lt;MenuFlyout&gt;
        &lt;MenuFlyoutItem
            x:Name=&quot;ExitItem&quot;
            Click=&quot;ExitItem_Click&quot;
            Text=&quot;Exit&quot; /&gt;
    &lt;/MenuFlyout&gt;
&lt;/essential:TaskbarIcon&gt;</x:String>
                    </local:CodeSource.Code>
                </local:CodeSource>
            </local:ControlExample.Xaml>
            <local:ControlExample.Idl>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">[default_interface]
runtimeclass MainWindow : WinUI3Package.WindowEx
{
    MainWindow();
    static Guid IconGuid{ get; };
}</x:String>
                    </local:CodeSource.Code>
                </local:CodeSource>
            </local:ControlExample.Idl>
            <local:ControlExample.Header>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve"> struct MainWindow : MainWindowT&lt;MainWindow&gt;
{
    static winrt::guid IconGuid();
};</x:String>
                    </local:CodeSource.Code>
                </local:CodeSource>
            </local:ControlExample.Header>
            <local:ControlExample.Cpp>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">winrt::guid MainWindow::IconGuid()
{
	// {733204C1-9F66-4E4E-A24C-CEA34294DA39}
	return
	{ 0x733204c1, 0x9f66, 0x4e4e, { 0xa2, 0x4c, 0xce, 0xa3, 0x42, 0x94, 0xda, 0x39 } };
}

//Showing the icon
MainIcon().Show();
                            
//Removing the icon
MainIcon().Remove();</x:String>
                    </local:CodeSource.Code>
                </local:CodeSource>
            </local:ControlExample.Cpp>
        </local:ControlExample>

        <local:ControlExample HeaderText="Create a single taskbar icon">
            <local:TaskbarIconSource x:Name="NormalIconSource" />
            <local:ControlExample.Options>
                <DropDownButton x:Name="NormalIconAdd" IsEnabled="{x:Bind NormalIconSource.IsFileSet, Mode=OneWay}">
                    Add
                    <DropDownButton.Flyout>
                        <MenuFlyout>
                            <ToggleMenuFlyoutItem
                                Click="NormalIconAdd_Click"
                                IsChecked="{x:Bind IsNormalIconWithXamlMenuAdded, Mode=OneWay}"
                                Text="Add icon with xaml menu" />
                            <ToggleMenuFlyoutItem
                                x:Name="NormalIconWithPopupMenuAdd"
                                Click="NormalIconWithPopupMenuAdd_Click"
                                IsChecked="{x:Bind IsNormalIconWithPopupMenuAdded, Mode=OneWay}"
                                Text="Add icon with popup menu" />
                        </MenuFlyout>
                    </DropDownButton.Flyout>
                </DropDownButton>
            </local:ControlExample.Options>
        </local:ControlExample>

        <local:ControlExample HeaderText="Create a taskbar icon that adapts to Windows light/dark theme">
            <Grid MinWidth="200" ColumnSpacing="50">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <essential:GroupBox Header="LightTheme">
                    <local:TaskbarIconSource x:Name="LightThemeIconSource" />
                </essential:GroupBox>

                <essential:GroupBox Grid.Column="1" Header="DarkTheme">
                    <local:TaskbarIconSource x:Name="DarkThemeIconSource" />
                </essential:GroupBox>
            </Grid>

            <local:ControlExample.Options>
                <DropDownButton
                    x:Name="ThemeAdaptiveIconAddButton"
                    Grid.Row="1"
                    IsEnabled="{x:Bind local:TaskbarIconPage.BoolAnd(LightThemeIconSource.IsFileSet, DarkThemeIconSource.IsFileSet), Mode=OneWay}">
                    Add
                    <DropDownButton.Flyout>
                        <MenuFlyout>
                            <ToggleMenuFlyoutItem
                                Click="ThemeAdaptiveIconAddButton_Click"
                                IsChecked="{x:Bind IsThemeAdaptiveIconWithXamlMenuAdded, Mode=OneWay}"
                                Text="Add icon with xaml menu" />
                            <ToggleMenuFlyoutItem
                                x:Name="ThemeAdaptiveIconWithPopupMenuAdd"
                                Click="ThemeAdaptiveIconWithPopupMenuAdd_Click"
                                IsChecked="{x:Bind IsThemeAdaptiveIconWithPopupMenuAdded, Mode=OneWay}"
                                Text="Add icon with pop up menu" />
                        </MenuFlyout>
                    </DropDownButton.Flyout>
                </DropDownButton>
            </local:ControlExample.Options>
        </local:ControlExample>

        <TextBlock>
            <Run Text="Menu item clicked: " />
            <Run x:Name="ClickedItemText" />
        </TextBlock>

        <TextBlock Text="Events:" />
        <Grid ColumnSpacing="20" RowSpacing="10">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <!--  Events Name  -->
            <TextBlock Grid.Row="0" Text="Left pressed: " />
            <TextBlock Grid.Row="1" Text="Left double pressed: " />
            <TextBlock Grid.Row="2" Text="Pointer hovered: " />
            <TextBlock Grid.Row="3" Text="Right pressed:" />

            <!--  count  -->
            <InfoBadge
                Grid.Row="0"
                Grid.Column="1"
                Value="{x:Bind LeftPressedCount, Mode=OneWay}" />
            <InfoBadge
                Grid.Row="1"
                Grid.Column="1"
                Value="{x:Bind LeftDoublePressedCount, Mode=OneWay}" />
            <InfoBadge
                Grid.Row="2"
                Grid.Column="1"
                Value="{x:Bind HoverCount, Mode=OneWay}" />
            <InfoBadge
                Grid.Row="3"
                Grid.Column="1"
                Value="{x:Bind RightPressedCount, Mode=OneWay}" />
        </Grid>

    </StackPanel>
</Page>
