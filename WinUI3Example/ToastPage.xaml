<?xml version="1.0" encoding="utf-8" ?>
<Page
    x:Class="WinUI3Example.ToastPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:essential="using:WinUI3Package"
    xmlns:local="using:WinUI3Example"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Page.Resources>
        <Style BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="TextBox">
            <Setter Property="MinWidth" Value="300" />
        </Style>
    </Page.Resources>

    <StackPanel
        HorizontalAlignment="Stretch"
        VerticalAlignment="Center"
        Orientation="Vertical"
        Spacing="5">
        <local:ControlExample HeaderText="BodyTextOnly">
            <Button x:Name="BodyTextOnlyBtn" Click="BodyTextOnlyBtn_Click">BodyTextOnly</Button>
            <local:ControlExample.Options>
                <TextBox x:Name="Body1" Header="Body" />
            </local:ControlExample.Options>
            <local:ControlExample.Cpp>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">
                            winrt::Windows::UI::Notifications::ToastNotificationManager::CreateToastNotifier().Show(ToastTemplates::BodyTextOnly{{L&quot;{0}&quot;}});
                        </x:String>
                    </local:CodeSource.Code>
                    <local:CodeSource.Substitutions>
                        <local:ControlExampleSubstitution Key="0" Value="{x:Bind Body1.Text, Mode=OneWay}" />
                    </local:CodeSource.Substitutions>
                </local:CodeSource>
            </local:ControlExample.Cpp>
        </local:ControlExample>


        <local:ControlExample HeaderText="SingleLineHeaderWithBody">
            <Button x:Name="SingleLineHeaderWithBodyBtn" Click="SingleLineHeaderWithBodyBtn_Click">SingleLineHeaderWithBody</Button>
            <local:ControlExample.Options>
                <StackPanel>
                    <TextBox x:Name="Header2" Header="Header" />
                    <TextBox x:Name="Body2" Header="Body" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Cpp>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">winrt::Windows::UI::Notifications::ToastNotificationManager::CreateToastNotifier()
.Show(ToastTemplates::SingleLineHeaderWithBody{{ L&quot;{0}&quot;, L&quot;{1}&quot; }});</x:String>
                    </local:CodeSource.Code>
                    <local:CodeSource.Substitutions>
                        <local:ControlExampleSubstitution Key="0" Value="{x:Bind Header2.Text, Mode=OneWay}" />
                        <local:ControlExampleSubstitution Key="1" Value="{x:Bind Body2.Text, Mode=OneWay}" />
                    </local:CodeSource.Substitutions>
                </local:CodeSource>
            </local:ControlExample.Cpp>
        </local:ControlExample>

        <local:ControlExample HeaderText="TwoLineHeaderWithBody">
            <Button x:Name="TwoLineHeaderWithBodyBtn" Click="TwoLineHeaderWithBodyBtn_Click">TwoLineHeaderWithBody</Button>
            <local:ControlExample.Options>
                <StackPanel>
                    <TextBox x:Name="Header3" Header="Header" />
                    <TextBox x:Name="Body3" Header="Body" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Cpp>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">winrt::Windows::UI::Notifications::ToastNotificationManager::CreateToastNotifier()
	.Show(ToastTemplates::TwoLineHeaderWithBody{{ L&quot;{0}&quot;, L&quot;{1}&quot; }});</x:String>
                    </local:CodeSource.Code>
                    <local:CodeSource.Substitutions>
                        <local:ControlExampleSubstitution Key="0" Value="{x:Bind Header3.Text, Mode=OneWay}" />
                        <local:ControlExampleSubstitution Key="1" Value="{x:Bind Body3.Text, Mode=OneWay}" />
                    </local:CodeSource.Substitutions>
                </local:CodeSource>
            </local:ControlExample.Cpp>
        </local:ControlExample>

        <local:ControlExample HeaderText="HeaderWithSingleLineBody">
            <Button x:Name="HeaderWithTwoSingleLineBody" Click="HeaderWithTwoSingleLineBody_Click">HeaderWithSingleLineBody</Button>
            <local:ControlExample.Options>
                <StackPanel>
                    <TextBox x:Name="Header4" Header="Header" />
                    <TextBox x:Name="Body4_1" Header="Body 1" />
                    <TextBox x:Name="Body4_2" Header="Body 2" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Cpp>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">winrt::Windows::UI::Notifications::ToastNotificationManager::CreateToastNotifier()
			.Show(ToastTemplates::HeaderWithTwoSingleLineBody{{ L&quot;{0}&quot;, L&quot;{1}&quot;, L&quot;{2}&quot; }});</x:String>
                    </local:CodeSource.Code>
                    <local:CodeSource.Substitutions>
                        <local:ControlExampleSubstitution Key="0" Value="{x:Bind Header4.Text, Mode=OneWay}" />
                        <local:ControlExampleSubstitution Key="1" Value="{x:Bind Body4_1.Text, Mode=OneWay}" />
                        <local:ControlExampleSubstitution Key="2" Value="{x:Bind Body4_2.Text, Mode=OneWay}" />
                    </local:CodeSource.Substitutions>
                </local:CodeSource>
            </local:ControlExample.Cpp>
        </local:ControlExample>

        <local:ControlExample HeaderText="ImageWithBodyOnly">
            <Button x:Name="ImageWithBodyOnly" Click="ImageWithBodyOnly_Click">ImageWithBodyOnly</Button>
            <local:ControlExample.Options>
                <TextBox x:Name="Body5" Header="Body" />
            </local:ControlExample.Options>
            <local:ControlExample.Cpp>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">winrt::Windows::UI::Notifications::ToastNotificationManager::CreateToastNotifier()
			.Show(ToastTemplates::ImageWithBodyOnly{{ L&quot;ms-appx:///Assets/Windows 11.png&quot;, L&quot;{0}&quot; }});</x:String>
                    </local:CodeSource.Code>
                    <local:CodeSource.Substitutions>
                        <local:ControlExampleSubstitution Key="0" Value="{x:Bind Body5.Text, Mode=OneWay}" />
                    </local:CodeSource.Substitutions>
                </local:CodeSource>
            </local:ControlExample.Cpp>
        </local:ControlExample>

        <local:ControlExample HeaderText="ImageWithHeaderAndBody">
            <Button x:Name="ImageWithHeaderAndBodyBtn" Click="ImageWithHeaderAndBodyBtn_Click">ImageWithHeaderAndBody</Button>
            <local:ControlExample.Options>
                <StackPanel>
                    <TextBox x:Name="Header6" Header="Header" />
                    <TextBox x:Name="Body6" Header="Body" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Cpp>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">winrt::Windows::UI::Notifications::ToastNotificationManager::CreateToastNotifier()
			.Show(ToastTemplates::ImageWithHeaderAndBody{{ L&quot;ms-appx:///Assets/Windows 11.png&quot;, L&quot;{0}&quot;, L&quot;{1}&quot; }});</x:String>
                    </local:CodeSource.Code>
                    <local:CodeSource.Substitutions>
                        <local:ControlExampleSubstitution Key="0" Value="{x:Bind Header6.Text, Mode=OneWay}" />
                        <local:ControlExampleSubstitution Key="1" Value="{x:Bind Body6.Text, Mode=OneWay}" />
                    </local:CodeSource.Substitutions>
                </local:CodeSource>
            </local:ControlExample.Cpp>
        </local:ControlExample>

        <local:ControlExample HeaderText="ImageWithTwoLineHeaderAndBody">
            <Button x:Name="ImageWithTwoLineHeaderAndBody" Click="ImageWithTwoLineHeaderAndBody_Click">ImageWithTwoLineHeaderAndBody</Button>
            <local:ControlExample.Options>
                <StackPanel>
                    <TextBox x:Name="Header7" Header="Header" />
                    <TextBox x:Name="Body7" Header="Body" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Cpp>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">winrt::Windows::UI::Notifications::ToastNotificationManager::CreateToastNotifier()
			.Show(ToastTemplates::ImageWithTwoLineHeaderAndBody{{ L&quot;ms-appx:///Assets/Windows 11.png&quot;, L&quot;{0}&quot;, L&quot;body&quot; }});
                        </x:String>
                    </local:CodeSource.Code>
                    <local:CodeSource.Substitutions>
                        <local:ControlExampleSubstitution Key="0" Value="{x:Bind Header7.Text, Mode=OneWay}" />
                        <local:ControlExampleSubstitution Key="1" Value="{x:Bind Body7.Text, Mode=OneWay}" />
                    </local:CodeSource.Substitutions>
                </local:CodeSource>
            </local:ControlExample.Cpp>
        </local:ControlExample>

        <local:ControlExample HeaderText="ImageWithHeaderAndTwoSingleLineBody">
            <Button x:Name="ImageWithHeaderAndTwoSingleLineBody" Click="ImageWithHeaderAndTwoSingleLineBody_Click">ImageWithHeaderAndTwoSingleLineBody</Button>
            <local:ControlExample.Options>
                <StackPanel>
                    <TextBox x:Name="Header8" Header="Header" />
                    <TextBox x:Name="Body8_1" Header="Body1" />
                    <TextBox x:Name="Body8_2" Header="Body2" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Cpp>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">		winrt::Windows::UI::Notifications::ToastNotificationManager::CreateToastNotifier()
			.Show(ToastTemplates::ImageWithHeaderAndTwoSingleLineBody{{ L&quot;ms-appx:///Assets/Windows 11.png&quot;, L&quot;{0}&quot;, L&quot;{1}&quot;, L&quot;{2}&quot; }});</x:String>
                    </local:CodeSource.Code>
                    <local:CodeSource.Substitutions>
                        <local:ControlExampleSubstitution Key="0" Value="{x:Bind Header8.Text, Mode=OneWay}" />
                        <local:ControlExampleSubstitution Key="1" Value="{x:Bind Body8_1.Text, Mode=OneWay}" />
                        <local:ControlExampleSubstitution Key="2" Value="{x:Bind Body8_2.Text, Mode=OneWay}" />
                    </local:CodeSource.Substitutions>
                </local:CodeSource>
            </local:ControlExample.Cpp>
        </local:ControlExample>


        <local:ControlExample HeaderText="Custom toast using builder syntax in C++">
            <Button x:Name="ToastBuilderBtn" Click="ToastBuilderBtn_Click">ToastBuilder API</Button>
            <local:ControlExample.Options>
                <StackPanel Spacing="5">
                    <ComboBox
                        x:Name="AudioComboBox"
                        Header="Autio"
                        PlaceholderText="Select audio">
                        <x:String>ms-winsoundevent:Notification.Default</x:String>
                        <x:String>ms-winsoundevent:Notification.IM</x:String>
                        <x:String>ms-winsoundevent:Notification.Mail</x:String>
                        <x:String>ms-winsoundevent:Notification.Reminder</x:String>
                        <x:String>ms-winsoundevent:Notification.SMS</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Alarm</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Alarm2</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Alarm3</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Alarm4</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Alarm5</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Alarm6</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Alarm7</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Alarm8</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Alarm9</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Alarm10</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Call</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Call2</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Call3</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Call4</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Call5</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Call6</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Call7</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Call8</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Call9</x:String>
                        <x:String>ms-winsoundevent:Notification.Looping.Call10</x:String>
                    </ComboBox>
                    <ToggleSwitch x:Name="LoopingToggle" Header="Loop audio:" />
                </StackPanel>
            </local:ControlExample.Options>

            <local:ControlExample.Cpp>
                <local:CodeSource>
                    <local:CodeSource.Code>
                        <x:String xml:space="preserve">
using namespace ToastBuilder;

auto const audio = getAudioSelection();
winrt::Windows::UI::Notifications::ToastNotificationManager::CreateToastNotifier()
	.Show(
		Toast().Duration(Long).Scenario(Reminder).UseButtonStyle(true).Launch(L&quot;launch arg&quot;)
		(
			Visual()
			(
				Binding().Template(L&quot;ToastText04&quot;)
				(
					Text().Id(1)(L&quot;headline&quot;),
					Text().Id(2)(L&quot;body text1&quot;),
					Text().Id(3)(L&quot;body text2&quot;)
				)
			),
			Actions()
			(
				Action().Content(L&quot;Single Argument&quot;).Arguments(L&quot;singleArgument&quot;)
				.Click([this](winrt::Microsoft::Windows::AppNotifications::AppNotificationActivatedEventArgs const&amp; args)
				{
					DispatcherQueue().TryEnqueue([this, args] {
						showArgumentToDialog(args);
					});
				}),
				Action().Content(L&quot;Cancel&quot;).Arguments(L&quot;arg1=value1;arg2=value2&quot;)
				.Click([this](winrt::Microsoft::Windows::AppNotifications::AppNotificationActivatedEventArgs const&amp; args)
				{
					DispatcherQueue().TryEnqueue([this, args] {
						showArgumentToDialog(args);
					});
				})
			),
			Audio().Src(audio.data()).Loop(LoopingToggle().IsOn())
		)
	);
                        </x:String>
                    </local:CodeSource.Code>
                </local:CodeSource>
            </local:ControlExample.Cpp>
        </local:ControlExample>

        <ContentDialog x:Name="ActivationDialog" PrimaryButtonText="OK">
            <StackPanel>
                <TextBlock>
                    <Run FontSize="20" Text="Argument:" />
                    <Run x:Name="ArgumentText" />
                </TextBlock>

                <ListView x:Name="ArgumentsList" />
            </StackPanel>
        </ContentDialog>
    </StackPanel>
</Page>
